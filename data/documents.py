from datetime import datetime

from mongoengine import Document, IntField, StringField, DateTimeField, connect, ReferenceField, ListField, \
    EmbeddedDocument, EmbeddedDocumentField

connect('betca-python')  # host: localhost, port: 27017, password:'', authentication_source=''


# BinaryField, BooleanField, ComplexDateTimeField, DateTimeField, DecimalField, DictField, DynamicField, EmailField
# EmbeddedDocumentField, EmbeddedDocumentListField, EnumField, FileField, FloatField, GenericEmbeddedDocumentField
# GenericReferenceField, GenericLazyReferenceField, GeoPointField, ImageField, IntField, ListField, LongField
# MapField, ObjectIdField, ReferenceField, LazyReferenceField, SequenceField, SortedListField, StringField
# URLField, UUIDField, PointField, LineStringField, PolygonField, MultiPointField, MultiLineStringField
# MultiPolygonField

class Composition(EmbeddedDocument):
    content = StringField()

    def __repr__(self):
        return str(self.dict())

    def dict(self):
        return {'content': self.content}


class Aggregation(Document):
    id = StringField(primary_key=True)  # manual
    name = StringField(required=True, unique=True)
    value = IntField()

    def __repr__(self):
        return str(self.dict())

    def dict(self):
        return {'id': str(self.id), 'name': self.name, 'value': self.value}


class MongoDocument(Document):  # Document or EmbeddedDocument)
    # id = StringField(primary_key=True)  # autogenerated
    mobile = IntField(required=True, unique=True)
    barcode = StringField(required=True)
    description = StringField(default='...')
    registration_date = DateTimeField()
    aggregation = ReferenceField(Aggregation)  # One to One
    aggregations = ListField(ReferenceField(Aggregation))  # One to Many
    composition = EmbeddedDocumentField(Composition)
    compositions = ListField(EmbeddedDocumentField(Composition))

    def __repr__(self):
        return str(self.dict())

    def dict(self):
        return {
            'id': str(self.id), 'mobile': self.mobile, 'barcode': self.barcode, 'description': self.description,
            'registration_date': self.registration_date, 'aggregation': self.aggregation,
            'aggregations': self.aggregations, 'composition': self.composition, 'compositions': self.compositions
        }


def create(document: MongoDocument):
    document.registration_date = datetime.now()
    return document.save()


def read(identifier: str):
    return MongoDocument.objects(id=identifier).get()  # unique


def update(identifier: str, document: MongoDocument):
    document_db = MongoDocument.objects(id=identifier).get()
    document_db.barcode = document.barcode
    document_db.description = document.description
    document_db.save()


def delete(identifier: str):
    MongoDocument.objects(id=identifier).delete()
    return None


if __name__ == "__main__":
    print('1:', MongoDocument.objects)
    print('1:', Aggregation.objects)
    MongoDocument.drop_collection()
    Aggregation.drop_collection()
    aggregation = Aggregation(id="1", name='111')
    aggregation.save()
    aggregation2 = Aggregation(id="2", name='222')
    aggregation2.save()
    composition = Composition(content="...!!!")
    document1 = create(MongoDocument(mobile=123, barcode='1234', description='des of 1234', aggregation=aggregation,
                                     aggregations=[aggregation], composition=composition))
    document2 = create(MongoDocument(mobile=456, barcode='4567', aggregation=aggregation,
                                     aggregations=[aggregation, aggregation2]))
    print('2:', document1)
    print('3:', read(document1.id))
    # ne, lt, lte, gt, gte, not, in, nin, mod, all...
    # exact, iexact, contains, icontains, startswith, istartswith, endswith, iendswith , match...  i==case insensitive
    print('4:', MongoDocument.objects(barcode__not__contains='4'))
    print('5:', MongoDocument.objects(barcode__startswith='1'))
    print('6:', MongoDocument.objects(mobile__gt=22))
    print('7:', MongoDocument.objects(composition__content__startswith='...'))
    print('8:', MongoDocument.objects[0:1])
    print('9:', MongoDocument.objects.count())
    delete(document1.id)
    print('10:', MongoDocument.objects)
